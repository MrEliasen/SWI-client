// @generated by protobuf-ts 2.9.1 with parameter long_type_string
// @generated from protobuf file "common.proto" (package "responses", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message responses.Coordinate
 */
export interface Coordinate {
    /**
     * @generated from protobuf field: int32 north = 1;
     */
    north: number;
    /**
     * @generated from protobuf field: int32 east = 2;
     */
    east: number;
    /**
     * @generated from protobuf field: string city = 3;
     */
    city: string;
    /**
     * @generated from protobuf field: string poi = 4;
     */
    poi: string;
    /**
     * @generated from protobuf field: int32 poitype = 5;
     */
    poitype: number;
}
/**
 * @generated from protobuf message responses.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string gang_tag = 3;
     */
    gangTag: string;
    /**
     * @generated from protobuf field: string rank = 4;
     */
    rank: string;
    /**
     * @generated from protobuf field: string hometown = 5;
     */
    hometown: string;
}
/**
 * @generated from protobuf message responses.Building
 */
export interface Building {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated string commands = 3;
     */
    commands: string[];
}
/**
 * @generated from protobuf message responses.NPC
 */
export interface NPC {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string rank = 2;
     */
    rank: string;
    /**
     * @generated from protobuf field: int32 health = 3;
     */
    health: number;
}
/**
 * @generated from protobuf message responses.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: float condition = 4;
     */
    condition: number;
    /**
     * @generated from protobuf field: responses.ItemType type = 5;
     */
    type: ItemType;
    /**
     * @generated from protobuf field: int32 amount = 6;
     */
    amount: number;
    /**
     * @generated from protobuf field: uint32 price = 7;
     */
    price: number;
    /**
     * @generated from protobuf field: uint32 damage = 8;
     */
    damage: number;
    /**
     * @generated from protobuf field: uint32 armor_guns = 9;
     */
    armorGuns: number;
    /**
     * @generated from protobuf field: uint32 armor_melee = 10;
     */
    armorMelee: number;
    /**
     * @generated from protobuf field: bool equipped = 11;
     */
    equipped: boolean;
    /**
     * @generated from protobuf field: bool is_gear = 12;
     */
    isGear: boolean;
    /**
     * @generated from protobuf field: bool has_use_effect = 13;
     */
    hasUseEffect: boolean;
}
/**
 * @generated from protobuf enum responses.NetworkType
 */
export enum NetworkType {
    /**
     * @generated from protobuf enum value: NETWORK_TYPE_SYSTEM = 0;
     */
    SYSTEM = 0,
    /**
     * @generated from protobuf enum value: NETWORK_TYPE_CHAT = 1;
     */
    CHAT = 1,
    /**
     * @generated from protobuf enum value: NETWORK_TYPE_STATS = 2;
     */
    STATS = 2
}
/**
 * @generated from protobuf enum responses.ResponseStatus
 */
export enum ResponseStatus {
    /**
     * @generated from protobuf enum value: RESPONSE_STATUS_NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * @generated from protobuf enum value: RESPONSE_STATUS_ERROR = 1;
     */
    ERROR = 1,
    /**
     * @generated from protobuf enum value: RESPONSE_STATUS_SUCCESS = 2;
     */
    SUCCESS = 2,
    /**
     * @generated from protobuf enum value: RESPONSE_STATUS_INFO = 3;
     */
    INFO = 3,
    /**
     * @generated from protobuf enum value: RESPONSE_STATUS_WARN = 4;
     */
    WARN = 4
}
/**
 * @generated from protobuf enum responses.ItemType
 */
export enum ItemType {
    /**
     * @generated from protobuf enum value: ITEM_TYPE_TRASH = 0;
     */
    TRASH = 0,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_GUN = 1;
     */
    GUN = 1,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_MELEE = 2;
     */
    MELEE = 2,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_ARMOR = 3;
     */
    ARMOR = 3,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_AMMO = 4;
     */
    AMMO = 4,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_SMART_PHONE = 5;
     */
    SMART_PHONE = 5,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_DRUG = 6;
     */
    DRUG = 6,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_LABEL = 7;
     */
    LABEL = 7,
    /**
     * @generated from protobuf enum value: ITEM_TYPE_MYSTERY = 8;
     */
    MYSTERY = 8
}
/**
 * @generated from protobuf enum responses.Gender
 */
export enum Gender {
    /**
     * @generated from protobuf enum value: RANDOM = 0;
     */
    RANDOM = 0,
    /**
     * @generated from protobuf enum value: MALE = 1;
     */
    MALE = 1,
    /**
     * @generated from protobuf enum value: FEMALE = 2;
     */
    FEMALE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Coordinate$Type extends MessageType<Coordinate> {
    constructor() {
        super("responses.Coordinate", [
            { no: 1, name: "north", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "east", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "city", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "poi", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "poitype", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Coordinate>): Coordinate {
        const message = { north: 0, east: 0, city: "", poi: "", poitype: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Coordinate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coordinate): Coordinate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 north */ 1:
                    message.north = reader.int32();
                    break;
                case /* int32 east */ 2:
                    message.east = reader.int32();
                    break;
                case /* string city */ 3:
                    message.city = reader.string();
                    break;
                case /* string poi */ 4:
                    message.poi = reader.string();
                    break;
                case /* int32 poitype */ 5:
                    message.poitype = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coordinate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 north = 1; */
        if (message.north !== 0)
            writer.tag(1, WireType.Varint).int32(message.north);
        /* int32 east = 2; */
        if (message.east !== 0)
            writer.tag(2, WireType.Varint).int32(message.east);
        /* string city = 3; */
        if (message.city !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.city);
        /* string poi = 4; */
        if (message.poi !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.poi);
        /* int32 poitype = 5; */
        if (message.poitype !== 0)
            writer.tag(5, WireType.Varint).int32(message.poitype);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.Coordinate
 */
export const Coordinate = new Coordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("responses.Player", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gang_tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rank", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hometown", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = { id: "0", name: "", gangTag: "", rank: "", hometown: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toString();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string gang_tag */ 3:
                    message.gangTag = reader.string();
                    break;
                case /* string rank */ 4:
                    message.rank = reader.string();
                    break;
                case /* string hometown */ 5:
                    message.hometown = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string gang_tag = 3; */
        if (message.gangTag !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.gangTag);
        /* string rank = 4; */
        if (message.rank !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rank);
        /* string hometown = 5; */
        if (message.hometown !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.hometown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Building$Type extends MessageType<Building> {
    constructor() {
        super("responses.Building", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "commands", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Building>): Building {
        const message = { name: "", description: "", commands: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Building>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Building): Building {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* repeated string commands */ 3:
                    message.commands.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Building, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* repeated string commands = 3; */
        for (let i = 0; i < message.commands.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.commands[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.Building
 */
export const Building = new Building$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NPC$Type extends MessageType<NPC> {
    constructor() {
        super("responses.NPC", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rank", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "health", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NPC>): NPC {
        const message = { name: "", rank: "", health: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NPC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NPC): NPC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string rank */ 2:
                    message.rank = reader.string();
                    break;
                case /* int32 health */ 3:
                    message.health = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string rank = 2; */
        if (message.rank !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rank);
        /* int32 health = 3; */
        if (message.health !== 0)
            writer.tag(3, WireType.Varint).int32(message.health);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.NPC
 */
export const NPC = new NPC$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("responses.Item", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "condition", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["responses.ItemType", ItemType, "ITEM_TYPE_"] },
            { no: 6, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "price", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "damage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "armor_guns", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "armor_melee", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "equipped", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_gear", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "has_use_effect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { id: "", name: "", description: "", condition: 0, type: 0, amount: 0, price: 0, damage: 0, armorGuns: 0, armorMelee: 0, equipped: false, isGear: false, hasUseEffect: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* float condition */ 4:
                    message.condition = reader.float();
                    break;
                case /* responses.ItemType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* int32 amount */ 6:
                    message.amount = reader.int32();
                    break;
                case /* uint32 price */ 7:
                    message.price = reader.uint32();
                    break;
                case /* uint32 damage */ 8:
                    message.damage = reader.uint32();
                    break;
                case /* uint32 armor_guns */ 9:
                    message.armorGuns = reader.uint32();
                    break;
                case /* uint32 armor_melee */ 10:
                    message.armorMelee = reader.uint32();
                    break;
                case /* bool equipped */ 11:
                    message.equipped = reader.bool();
                    break;
                case /* bool is_gear */ 12:
                    message.isGear = reader.bool();
                    break;
                case /* bool has_use_effect */ 13:
                    message.hasUseEffect = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* float condition = 4; */
        if (message.condition !== 0)
            writer.tag(4, WireType.Bit32).float(message.condition);
        /* responses.ItemType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* int32 amount = 6; */
        if (message.amount !== 0)
            writer.tag(6, WireType.Varint).int32(message.amount);
        /* uint32 price = 7; */
        if (message.price !== 0)
            writer.tag(7, WireType.Varint).uint32(message.price);
        /* uint32 damage = 8; */
        if (message.damage !== 0)
            writer.tag(8, WireType.Varint).uint32(message.damage);
        /* uint32 armor_guns = 9; */
        if (message.armorGuns !== 0)
            writer.tag(9, WireType.Varint).uint32(message.armorGuns);
        /* uint32 armor_melee = 10; */
        if (message.armorMelee !== 0)
            writer.tag(10, WireType.Varint).uint32(message.armorMelee);
        /* bool equipped = 11; */
        if (message.equipped !== false)
            writer.tag(11, WireType.Varint).bool(message.equipped);
        /* bool is_gear = 12; */
        if (message.isGear !== false)
            writer.tag(12, WireType.Varint).bool(message.isGear);
        /* bool has_use_effect = 13; */
        if (message.hasUseEffect !== false)
            writer.tag(13, WireType.Varint).bool(message.hasUseEffect);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.Item
 */
export const Item = new Item$Type();
